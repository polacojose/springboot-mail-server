/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package emailsapi.Email;

import org.junit.jupiter.api.Test;

import emailsapi.Email.Error.EmailNotFoundException;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.SQLException;

class EmailSQLiteStoreTest {
    @Test void canCreateEmail() throws SQLException {
        EmailSQLiteStore store = new EmailSQLiteStore("test");
        Email emailCreated = store.CreateEmail(new EmailDraft(0, "message", "sender", "recipient", false));
        Email emailExpected = new EmailDraft(emailCreated.getId(), "message", "sender", "recipient", false);
        
        store = new EmailSQLiteStore("test");
        Email emailGet = store.GetEmail(emailExpected.getId());

        assertEquals(emailExpected, emailGet);

        store = new EmailSQLiteStore("test");
        emailCreated = store.CreateEmail(new EmailSent(0, "message", "sender", "recipient", false));
        emailExpected = new EmailSent(emailCreated.getId(), "message", "sender", "recipient", false);
        
        store = new EmailSQLiteStore("test");
        emailGet = store.GetEmail(emailExpected.getId());

        assertEquals(emailExpected, emailGet);

        store = new EmailSQLiteStore("test");
        emailCreated = store.CreateEmail(new EmailReceived(0, "message", "sender", "recipient", false));
        emailExpected = new EmailReceived(emailCreated.getId(), "message", "sender", "recipient", false);
        
        store = new EmailSQLiteStore("test");
        emailGet = store.GetEmail(emailExpected.getId());

        assertEquals(emailExpected, emailGet);
    }

    @Test void canUpdateEmail() throws SQLException {
        EmailSQLiteStore store = new EmailSQLiteStore("test");
        Email emailCreated = store.CreateEmail(new EmailDraft(0, "message", "sender", "recipient", false));
        Email emailExpected = new EmailDraft(emailCreated.getId(), "message", "sender", "recipient", false);
        
        store = new EmailSQLiteStore("test");
        Email emailGet = store.GetEmail(emailExpected.getId());

        assertEquals(emailExpected, emailGet);

        EmailDraft emailNewExpected = new EmailDraft(emailCreated.getId(), "new message", "new sender", "new recipient", false);
        store = new EmailSQLiteStore("test");
        store.UpdateEmail(emailNewExpected);
        
        store = new EmailSQLiteStore("test");
        emailGet = store.GetEmail(emailExpected.getId());

        assertEquals(emailNewExpected, emailGet);
    }

    @Test void canTrashEmail() throws SQLException {
        EmailSQLiteStore store = new EmailSQLiteStore("test");
        Email emailCreated = store.CreateEmail(new EmailDraft(0, "message", "sender", "recipient", false));
        Email emailExpected = new EmailDraft(emailCreated.getId(), "message", "sender", "recipient", false);
        
        store = new EmailSQLiteStore("test");
        Email emailGet = store.GetEmail(emailExpected.getId());
        assertEquals(emailExpected, emailGet);

        store = new EmailSQLiteStore("test");
        store.TrashEmail(emailExpected.getId());
        
        assertThrows(EmailNotFoundException.class, () -> {
            EmailSQLiteStore s = new EmailSQLiteStore("test");
            s.GetEmail(emailExpected.getId());
        });
    }

    @Test void canSendEmail() throws SQLException {
        EmailSQLiteStore store = new EmailSQLiteStore("test");
        Email emailCreated = store.CreateEmail(new EmailDraft(0, "message", "sender", "recipient", false));
        Email emailExpected = new EmailDraft(emailCreated.getId(), "message", "sender", "recipient", false);
        
        store = new EmailSQLiteStore("test");
        Email emailGet = store.GetEmail(emailExpected.getId());
        assertEquals(emailExpected, emailGet);

        store = new EmailSQLiteStore("test");
        store.SendEmail(emailGet.getId());
        
        store = new EmailSQLiteStore("test");
        Email emailNewGet = store.GetEmail(emailGet.getId());
        
        EmailSent emailNewExpected = new EmailSent(emailNewGet.getId(), "message", "sender", "recipient", false);

        System.out.println(emailNewGet.getState());

        assertEquals(emailNewExpected, emailNewGet);
        
    }
}
